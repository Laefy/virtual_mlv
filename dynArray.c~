/* ***************************************************************************
 *
 * This file is part of virtual_mlv.
 *
 * virtual_mlv is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * virtual_mlv is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with virtual_mlv.  If not, see
 * <http://www.gnu.org/licenses/>.
 *
 *
 *  Author: G. Fuhs, C. Morvan
 *
 *************************************************************************** */

/* ***************************************************************************
 *	dynArray.c
 * 
 * This file contains functions enabeling to allocate strictly
 * positive integers into a dynamically allocated array.
 *
 * addTab: write
 * getValue: retrieve
 * freeArray: free allocated space.
 * 
 *************************************************************************** */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int* tabDynamic = NULL;
int sizeMax=0;

void addTab(int key ,int value )
{
	int *tabTmp;
	if(sizeMax==0)
	{
		if( (tabDynamic=calloc(128,sizeof(int)))==NULL)
		{
			perror("calloc");
			exit(EXIT_FAILURE);
		}
		sizeMax=128;
	}
	while(key>sizeMax)
	{
		if((tabTmp=realloc(tabDynamic,sizeof(int)*sizeMax*2))== NULL)
		{
			perror("realloc");
			exit(EXIT_FAILURE);
		}
		tabDynamic=tabTmp;
		sizeMax*=2;
	}
	tabDynamic[key]=value;
}

int getValue(int key)
{
	if(key > sizeMax)
		return -1;
	return tabDynamic[key];
}

void freeArray()
{
	free(tabDynamic);
	tabDynamic=NULL;
	sizeMax=0;
}
